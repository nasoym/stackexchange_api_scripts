#!/usr/bin/env bash

set -eufo pipefail
trap 'echo "$0: error at line ${LINENO}: >$(cat $0 | sed -n "${LINENO}p")<"; exit 1' ERR

while getopts "x:i:p:s:t:b:" options; do case $options in
  p) page="$OPTARG" ;;
  s) pagesize="$OPTARG" ;;
  t) title_query="$OPTARG" ;;
  b) body_query="$OPTARG" ;;
  i) include_tags="$OPTARG" ;;
  x) exclude_tags="$OPTARG" ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }
: ${page:="1"}
: ${pagesize:="10"}
: ${min_answer_count:="1"}
: ${site:="stackoverflow"} # superuser serverfault askubuntu unix softwareengineering raspberrypi security devops vi
: ${sort:="votes"} # relevance votes activity
: ${include_tags:=""}
: ${exclude_tags:=""}
: ${title_query:=""}
: ${body_query:=""}
: ${debug:=0}
: ${short:=1}
: ${raw:=0}
: ${limit_lines:=1}
: ${jq_date_format:="%Y-%m-%d"}

if [[ "$limit_lines" -eq 1 ]];then 
  : ${last_body_char:="$(( $(tput cols) - 20 ))"}
fi
: ${last_body_char:="-1"}

if [[ "$debug" -eq 1 ]];then set -x ; fi

if [[ "$#" -eq 0 ]];then :

elif [[ "$1" == "sites" ]];then shift
  curl -s \
    --compressed \
  "https://api.stackexchange.com/2.2/sites\
?access_token=${access_token}&key=${application_key}\
&page=${page}\
&pagesize=${pagesize}\
" \
| jq -M -r ".items|map({\
api_site_parameter\
,name\
,audience\
})"

elif [[ "$1" == "site_info" ]];then shift
  curl -s \
    --compressed \
    "https://api.stackexchange.com/2.2/info\
?access_token=${access_token}&key=${application_key}\
&site=${site}\
"

elif [[ "$1" == "search" ]];then shift
  : ${query:="$@"}
  result="$( curl -s \
    --compressed \
    "https://api.stackexchange.com/2.2/search/excerpts\
?access_token=${access_token}&key=${application_key}\
&site=${site}\
&page=${page}\
&pagesize=${pagesize}\
&order=desc\
&sort=votes\
&answers=${min_answer_count}\
&tagged=${include_tags}\
&nottagged=${exclude_tags}\
&filter=withbody\
&q=$(urlencode ${query// /+})\
&title=$(urlencode ${title_query})\
&body=$(urlencode ${body_query})\
"
)"

  if [[ "$short" -eq 1 ]];then
    echo "$result" \
      | jq -M ".items\
|map({\
question_id,\
answer_count,\
tags:(.tags|join(\",\")),\
creation_date:(.creation_date|strftime(\"${jq_date_format}\")),\
title:(.title[0:${last_body_char}]),\
body:(.body[0:${last_body_char}])\
})|reverse"
# score,\
# question_score,\

  else
    if [[ "$raw" -eq 1 ]];then
      echo "$result"
    else
      echo "$result" \
      | jq -M '.items' \
      | linecut
    fi
  fi

  quota="$(jq -r '.quota_remaining' <<<"$result")"
  echo "remaining daily quota: $quota" >&2

elif [[ "$1" == "question" ]];then shift
  : ${question_id:="$1"} ; shift

  question_result="$(curl -s \
    --compressed \
    "https://api.stackexchange.com/2.2/questions/${question_id}\
?access_token=${access_token}&key=${application_key}\
&site=${site}\
&filter=withbody\
" )"
  answers_result="$(curl -s \
    --compressed \
    "https://api.stackexchange.com/2.2/questions/${question_id}/answers\
?access_token=${access_token}&key=${application_key}\
&page=${page}\
&pagesize=${pagesize}\
&site=${site}\
&filter=withbody\
" )"

  if [[ "$short" -eq 1 ]];then
    echo "$question_result" \
      | jq -M --argjson answers "${answers_result}" ".items\
|map({\
question_id,\
answer_count,\
tags:(.tags|join(\",\")),\
title:(.title[0:${last_body_char}]),\
creation_date:(.creation_date|strftime(\"${jq_date_format}\")),\
body:(.body[0:${last_body_char}]),\
answers:(\$answers|.items|map({\
creation_date:(.creation_date|strftime(\"${jq_date_format}\")),\
body:.body[0:${last_body_char}]\
}))\
})[]"

  else
    echo "$question_result"
    echo "$answers_result"
  fi

  quota="$(jq -r '.quota_remaining' <<<"$answers_result")"
  echo "remaining daily quota: $quota" >&2

elif [[ "$1" =~ ^[0-9]*$ ]];then 
  $0 question $1

else
  $0 search $@

fi

# <https://api.stackexchange.com/docs/advanced-search#

